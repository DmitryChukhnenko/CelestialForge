services:  

  # База данных (PostgreSQL)
  db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - app-network

  # Файловое хранилище (Minio)
  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}     
      # MINIO_BUCKET: ${MINIO_BUCKET} 
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://${MINIO_URL}/minio/health/live; }                     # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                                  # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                               # wait until Minio is alive
        mc alias set minio http://${MINIO_URL} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}  # setup Minio client
        mc mb minio/${MINIO_BUCKET}  || true                                              # create a test bucket
        mc anonymous set public minio/${MINIO_BUCKET}                                     # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid                            # stop Minio
        while isAlive; do sleep 0.1; done                                                 # wait until Minio is stopped
        exec minio $0 "$@"                                                                # start Minio in the foreground
      '
    command: server /data --json --console-address ':9090'
    ports: ['${MINIO_PORT}:${MINIO_PORT}/tcp', '9090:9090/tcp'] # open http://127.0.0.1:9090 (9000 is the API port)
    volumes: [minio-data:/data:rw]
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://${MINIO_URL}/minio/health/live']
      interval: 10s
      start_interval: 1s
      start_period: 10s
    security_opt: [no-new-privileges:true]
    networks:
      - app-network
  
  # Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app-network
    
  #Spring
  app:    
    build: .
    container_name: spring-boot-app
    env_file:
      - .env
    ports:
      - "${SPRING_PORT}:${SPRING_PORT}"    
    volumes:
      - ./uploads:/app/uploads    
    depends_on:
      - db
      - minio
      - redis
    networks:
      - app-network

  #Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - minio
    networks:
      - app-network

volumes:
  minio-data: {}

networks:
  app-network:
    driver: bridge
